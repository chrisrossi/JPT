<html xmlns:tal="http://xml.zope.org/namespaces/tal">
  <head>
    <title tal:content="'This is a silly test'">What's so silly about a test?</title>
  </head>
  <body>
    <h1>This is a test</h1>
    <p>
      First let's test <i tal:content="here/friend/number">content</i>.
    </p>
    <p>
      Now let's test <span tal:replace="here/favoriteColor">replace</span>.
    </p>
    <p>
      This should <span tal:omit-tag="">omit the span tag.</span><br>
      This should <span tal:omit-tag="here/dumb">not omit the span tag</span><br>
      This should <span tal:omit-tag="here/goodLooking">omit the span tag</span><br>
      This should <span tal:omit-tag="here/friend/zero">not omit the span tag</span><br>
      This should <span tal:omit-tag="here/friend/number">omit the span tag</span>
    </p>
    <p>
     This is the equivalent of a <span tal:omit-tag="" tal:content="here/favoriteColor">replace</span>
    </p>
    <p>
      This should generate some <span tal:attributes="class 'myclass'; href string:http://captainsaturn.com/${here/favoriteColor};">attributes</span><br>
      So should <span tal:attributes="html:src here/friend/number">this</span><br>
      This should <span enemy="my enemy" tal:attributes="enemy here/enemy">get rid of my enemy</span><br>
      This should <span tal:attributes="noone here/enemy">have no attributes</span><br>
      This contains <span tal:attributes="how-are-you string:I am fine;; How are you?;good-looking here/goodLooking">a semicolon</span><br>
      A limiting case: <span tal:attributes="hello string:;;">semicolon at end</span>
    </p>
    <p tal:condition="here/dumb">
      This paragraph should be removed.
    </p>
    <p tal:condition="here/goodLooking">
      This paragraph can stay.
    </p>
    <p>
      Let's try defining some 
      <span tal:define="howard here/friend/map; 
                        animal string:zebra;"
            tal:attributes="number howard/hello"
            tal:content="string:my $animal is ${howard/enemy}">variables</span><br>
      <span tal:define="semicolon string:;;; period string:."
            tal:replace="string:this is a '${semicolon}' and this is a '${period}'">punctuation</span>
    </p>
    <p>
      Do our variables stay in <b tal:content="howard/friend">scope</b>?
    </p>
    <p>
      Some people
      <ul>
        <li tal:repeat="person here/people" tal:content="person" tal:attributes="length person/length()">Person</li>
        <li tal:content="person">Somebody</li>
      </ul>
    </p>
    <p>
      Some more people
      <ul>
        <li tal:repeat="person here/people/iterator()" tal:content="person" tal:attributes="length person/length()">Person</li>
        <li tal:content="person">Somebody</li>
      </ul>
    </p>
    <p>
      Some animals
      <ul>
        <li tal:repeat="animal here/animals" tal:content="animal" tal:attributes="length animal/length()">an animal</li>
        <li tal:content="animal">Something furry</li>
      </ul>
    </p>
    <p>
      A small grid table
      <table>
        <tr tal:repeat="y here/table">
          <td tal:repeat="x y" tal:content="x">a number</td>
        </tr>
      </table>
    </p>
    <p tal:define="numbers here/numbers">
      Try out all of our loop variables<br>
      length=<span tal:replace="numbers/size()">length</span><br>
      <table>
        <tr>
          <th>Value</th>
          <th>Index</th>
          <th>Number</th>
          <th>Even index</th>
          <th>Odd index</th>
          <th>Start</th>
          <th>End</th>
          <th>Length</th>
          <th>Letter</th>
          <th>Capital Letter</th>
          <th>Roman</th>
          <th>Capital Roman</th>
        </tr>
        <tr tal:repeat="number numbers">
          <td tal:content="number">value</td>
          <td tal:content="repeat/number/index">index</td>
          <td tal:content="repeat/number/number">number</td>
          <td tal:content="repeat/number/even">even</td>
          <td tal:content="repeat/number/odd">odd</td>
          <td tal:content="repeat/number/start">start</td>
          <td tal:content="repeat/number/end">end</td>
          <td tal:content="repeat/number/length">length</td>
          <td tal:content="repeat/number/letter">letter</td>
          <td tal:content="repeat/number/capitalLetter">capital letter</td>
          <td tal:content="repeat/number/roman">roman</td>
          <td tal:content="repeat/number/capitalRoman">capitalRoman</td>
        </tr>
      </table>
      <p tal:condition="exists:repeat">
        If you see this paragraph, the 'repeat' map was not disposed of
        properly.
      </p>
    </p>
    <p>
       Let's try a nested loop using the same loop variable name.
       Apparently if you use recursive macros, something I've never
       done, you will need for this to work.  Use case courtesy of
       James Davies.
       <tal:block tal:repeat="n here/table">
         <div tal:content="n.length"/>
         <ul>
           <div tal:repeat="n n">
             <li tal:content="n">n</li>
           </div>
         </ul>
       </tal:block>
    </p> 
    <p tal:evaluate="java: joemama = 1 + 3"
       tal:content="joemama">Joe Mama</p>
  </body>
</html>
